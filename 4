package wfoauth

import (
	"context"
	"encoding/base64"
	"errors"
	"io"
	"net/http"
	"net/url"
	"strings"
	"time"
)

// TokenResponse matches Wells Fargo’s JSON.
type TokenResponse struct {
	TokenType   string `json:"token_type"`
	AccessToken string `json:"access_token"`
	ExpiresIn   int64  `json:"expires_in"`
	Scope       string `json:"scope"`
	IssuedAt    int64  `json:"issued_at"`
}

// FetchToken performs the client‑credentials flow.
//
//   ctx         – caller’s context (supports timeout / cancel)
//   authURL     – e.g. "https://apiIDP‑nonprod.wellsfargo.net/oauth/token"
//   clientID    – string from onboarding portal
//   clientSecret– companion secret
//
// It returns the decoded JSON plus raw HTTP status/error text.
func FetchToken(ctx context.Context, authURL, clientID, clientSecret string) (*TokenResponse, *http.Response, error) {
	// 1) Sanitise creds (trim trailing newline/CR from env files)
	clientID = strings.TrimSpace(clientID)
	clientSecret = strings.TrimSpace(clientSecret)

	if clientID == "" || clientSecret == "" {
		return nil, nil, errors.New("clientID or clientSecret empty after trim")
	}

	// 2) Build body exactly the way Postman does
	form := url.Values{}
	form.Set("grant_type", "client_credentials")
	body := strings.NewReader(form.Encode())

	req, err := http.NewRequestWithContext(ctx, http.MethodPost, authURL, body)
	if err != nil {
		return nil, nil, err
	}
	req.Header.Set("Content-Type", "application/x-www-form-urlencoded")
	req.Header.Set("Accept", "application/json")

	// 3) Add a SINGLE Basic‑Auth header
	basic := base64.StdEncoding.EncodeToString([]byte(clientID + ":" + clientSecret))
	req.Header.Set("Authorization", "Basic "+basic)

	// 4) Choose your own http.Client so nothing else injects another header
	httpClient := &http.Client{
		Timeout: 15 * time.Second,
	}

	resp, err := httpClient.Do(req)
	if err != nil {
		return nil, nil, err
	}
	defer resp.Body.Close()

	// 5) Read full body for debugging on non‑200s
	rawBody, _ := io.ReadAll(resp.Body)
	if resp.StatusCode != http.StatusOK {
		return nil, resp, errors.New("token endpoint returned " + resp.Status)
	}

	// 6) Decode JSON
	var tr TokenResponse
	if err := json.Unmarshal(rawBody, &tr); err != nil {
		return nil, resp, err
	}
	return &tr, resp, nil
}
