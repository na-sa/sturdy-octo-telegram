package amelia

import (
	"context"
	"encoding/json"
	"errors"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"strings"
	"sync"
	"time"
)

// Config holds your OAuth2 settings.
type Config struct {
	AuthURL      string // e.g. "https://apiIDP-nonprod.wellsfargo.net/oauth/token"
	ClientID     string
	ClientSecret string
}

// AmeliaClient wraps the config plus a cached token.
type AmeliaClient struct {
	cfg        Config
	httpClient *http.Client
	mu         sync.Mutex
	token      string
	expires    time.Time
}

// New creates an AmeliaClient. If you pass nil for httpClient,
// it will default to a 15s‑timeout client.
func New(cfg Config, httpClient *http.Client) *AmeliaClient {
	if httpClient == nil {
		httpClient = &http.Client{Timeout: 15 * time.Second}
	}
	return &AmeliaClient{cfg: cfg, httpClient: httpClient}
}

// getToken ensures we have a non‑expired token, or fetches a new one.
func (c *AmeliaClient) getToken(ctx context.Context) (string, error) {
	c.mu.Lock()
	defer c.mu.Unlock()

	// 1) Reuse cached token if still valid
	if time.Now().Before(c.expires) && c.token != "" {
		return c.token, nil
	}

	// 2) Trim and validate credentials
	clientID := strings.TrimSpace(c.cfg.ClientID)
	clientSecret := strings.TrimSpace(c.cfg.ClientSecret)
	if clientID == "" || clientSecret == "" {
		return "", errors.New("clientID or clientSecret empty after trim")
	}

	// 3) Build the form body (including empty scope)
	form := url.Values{}
	form.Set("grant_type", "client_credentials")
	form.Set("scope", "") // Apigee often expects a scope param, even if empty

	// 4) Create the HTTP request
	req, err := http.NewRequestWithContext(ctx, http.MethodPost, c.cfg.AuthURL, strings.NewReader(form.Encode()))
	if err != nil {
		return "", fmt.Errorf("creating token request: %w", err)
	}
	req.Header.Set("Content-Type", "application/x-www-form-urlencoded")
	req.Header.Set("Accept", "application/json")
	req.SetBasicAuth(clientID, clientSecret) // single, canonical Basic header

	// 5) Send and check status
	resp, err := c.httpClient.Do(req)
	if err != nil {
		return "", fmt.Errorf("performing token request: %w", err)
	}
	defer resp.Body.Close()

	if resp.StatusCode != http.StatusOK {
		body, _ := io.ReadAll(resp.Body)
		return "", fmt.Errorf("token request failed: %d %s", resp.StatusCode, string(body))
	}

	// 6) Decode the JSON
	var tr struct {
		AccessToken string `json:"access_token"`
		ExpiresIn   int64  `json:"expires_in"`
	}
	if err := json.NewDecoder(resp.Body).Decode(&tr); err != nil {
		return "", fmt.Errorf("decoding token response: %w", err)
	}

	// 7) Cache and return
	c.token = tr.AccessToken
	// expire a few seconds early to avoid edge‑of‑expiry usage
	c.expires = time.Now().Add(time.Duration(tr.ExpiresIn-10) * time.Second)

	return c.token, nil
}
